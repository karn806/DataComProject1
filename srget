#!/usr/bin/env python

import socket as sk 
import os
import sys
from urlparse import urlparse


def mkDownloadRequest(serv, objName, sizeFile):
	return ("GET {o} HTTP/1.1\r\n" + "Host: {s}\r\n"+"Range: bytes={r}-"+"\r\n\r\n").format(o=objName, s=serv, r=str(sizeFile))

def rangeBytesRequest(serv, objName, sizeFile, end_point):
	# sizeFile = os.path.getsize(file_)
	return ("GET {o} HTTP/1.1\r\n" + "Host: {s}\r\n" + "Range: bytes={r}-{e}" + "\r\n\r\n").format(o=objName, s=serv, r=str(sizeFile), e=str(end_point))

def mkHeaderRequest(serv, objName):
	return ("HEAD {o} HTTP/1.1\r\n" + "Host: {s}\r\n"+"\r\n\r\n").format(o=objName, s=serv)

def open_socket(path, inputName, start_point):

	url = urlparse(path)
	servName = url[1]
	object_ = url[2]
	port = url.port
	if port==None:
		port = 80

	## create an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
	## connect to a destination as specified by the pair
	sock.connect((servName, port))

	request = mkDownloadRequest(servName, path, start_point)
	sock.send(request)

	return sock

def open_socket_resume(path, inputName, start_point, end_point):

	url = urlparse(path)
	servName = url[1]
	object_ = url[2]
	port = url.port
	if port==None:
		port = 80

	## create an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
	## connect to a destination as specified by the pair
	sock.connect((servName, port))

	request = rangeBytesRequest(servName, path, start_point, end_point)
	sock.send(request)

	return sock


############################################################


def getHeaderOnly(servName, port):

	## create an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
	## connect to a destination as specified by the pair
	sock.connect((servName, port))

	request = mkHeaderRequest(servName, path)
	sock.send(request)

	header = sock.recv(1024)

	return header

def getHeader_theRest(socket_input):
	content = ""
	while True:
		chunk = socket_input.recv(1024)
		content+=chunk
		if "\r\n\r\n" in content:
			findrnrnIndex = content.find('\r\n\r\n')
			header = content[:findrnrnIndex+4] ## start to end of header
			therest = content[findrnrnIndex+4:] ## the firse few chunk of header
			break
	return header, therest #header, therest


def getContentLength(header):
	index = header.find("Content-Length: ")
	ContentLength = header[index:]
	indexColon = ContentLength.find(":")
	numContentLength = ContentLength[indexColon+2:]
	findBackrn = numContentLength.find("\r\n")
	pureContentLength = numContentLength[:findBackrn]

	return pureContentLength


############################################################

def findContentLength(file_header):
	header = open(file_header, "r")
	for each_line in header:
		if "Content-Length:" in each_line:
			indexColon = each_line.find(":")
			ContentLength = each_line[indexColon+2:]
			break
	header.close()
	return ContentLength

def findETag(file_header):
	header = open(file_header, "r")
	for each_line in header:
		if "ETag:" in each_line:
			indexColon = each_line.find(":")
			etag = each_line[indexColon+2:]
			break
	header.close()
	return etag

def findDateModified(file_header):
	header = open(file_header, "r")
	for each_line in header:
		if "Last-Modified:" in each_line:
			indexColon = each_line.find(":")
			dm = each_line[indexColon+2:]
			break
	header.close()
	return dm

############################################################


## main
def srget():

	inputName = sys.argv[2]
	path = sys.argv[3]

	if 'https' in path:
		sys.exit(1)
	elif 'http://' not in path:
		path = "http://"+path

	if os.path.exists(inputName):
		print 'enter if file alr exists'

		sizeFile = os.path.getsize(inputName)
		input_header = inputName+"_header.txt"

		if os.path.exists(input_header):
			ContentLength = findContentLength(input_header) # call function that find CL from header.txt
			LastModified_from_headerfile = findDateModified(input_header)
			ETag_from_headerfile = findETag(input_header)
		else:
			print "Warning!!! File already existed!!!!!!!"
			sys.exit(1)


		#### open sock here
		sock = open_socket_resume(path, inputName, sizeFile, ContentLength)

		header, body = getHeader_theRest(sock)
		content_length = getContentLength(header)


		## create temp header.txt to check for ETag and date Last-Modified of the existing file
		_header = "current_header.txt"
		current_header = open(_header, "a+")
		current_header.write(header)
		current_header.flush()
		current_header.close()

		current_etag = findETag(_header)
		current_dm = findDateModified(_header)

		os.remove(_header)


		if current_etag == ETag_from_headerfile:
			if current_dm == LastModified_from_headerfile:
				## if there is content-length.....
				# print "before go in ContentLength.....", ContentLength
				if ContentLength != None: 
					print "enter ContentLength"
					total_len = 0
					File = open(inputName, 'a+') # append
					File.write(body)
					File.flush()
					total_len = sizeFile + len(body)
					while True:
						print 'total_len= ', total_len
						print 'ContentLength= ', ContentLength
						if total_len == int(ContentLength):
							os.remove(input_header)
							File.close()
							sock.close()
							print "Download complete!!!!"
							sys.exit(1)
							# break
						chunk = sock.recv(1024)
						# print "chunk = ", len(chunk)
						total_len += len(chunk)
						File.write(chunk)
						File.flush()


	print 'enter if file does not exist'
	sock = open_socket(path, inputName, 0)
	
	header, body = getHeader_theRest(sock)
	ContentLength = getContentLength(header)

	#### create temp header txt file
	input_header = inputName+"_header.txt"
	fileHeader = open(input_header, "a+") ## keep header in the file
	fileHeader.write(header)
	fileHeader.flush()
	fileHeader.close()

	## start downloading here
	File = open(inputName, 'a+') # append
	File.write(body)
	File.flush()
	while True:
		if len(body) == int(ContentLength):
			os.remove(input_header)
			File.close()
			sock.close()
			print "Download complete!!!"
			break
		chunk = sock.recv(1024)
		body += chunk
		File.write(chunk)
		File.flush()
	# return body

srget()












