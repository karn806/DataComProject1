#!/usr/bin/env python
import asyncore, socket
import logging
from cStringIO import StringIO ## StringIO append is faster than the normal one
import os
import sys
from urlparse import urlparse
import socket as sk


def mkHeaderRequest(serv, objName):
	return ("HEAD {o} HTTP/1.1\r\n" + "Host: {s}\r\n"+ "Cennection: close\r\n" + "\r\n\r\n").format(o=objName, s=serv)

# def rangeBytesRequest(serv, objName, sizeFile, end_point):
	# return ("GET {o} HTTP/1.1\r\n" + "Host: {s}\r\n" + "Cennection: close\r\n" + "Range: bytes={r}-{e}" + "\r\n\r\n").format(o=objName, s=serv, r=str(sizeFile), e=str(end_point))

# def mkDownloadRequest(serv, objName, sizeFile, end_point):
# 	return ("GET {o} HTTP/1.1\r\n" + "Host: {s}\r\n" + "Range: bytes={r}-{e}" + "\r\n\r\n").format(o=objName, s=serv, r=str(sizeFile), e=str(end_point))

path = sys.argv[5]
url = urlparse(path)
servName = str(url[1])
object_ = str(url[2])
port = url.port
if port==None:
	port = 80
inputName = sys.argv[2]
connection_num = sys.argv[4]
connection_num = int(connection_num)

if 'https' in path:
	print "Unable to download the link"
	sys.exit(1)
elif 'http://' not in path:
	path = "http://"+path

input_header = inputName+"_header.txt"
input_header2 = inputName+"_header2.txt"


def getHeaderOnly(servName, port, path):
	## create an empty socket
	sock = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
	## connect to a destination as specified by the pair
	sock.connect((servName, port))
	request = mkHeaderRequest(servName, path)
	sock.send(request)
	header = sock.recv(1024)
	sock.close()
	return header

### helper function to separate the header and some first chunk of body content
def getHeader_theRest(input_data): ## input data
	if "\r\n\r\n" in input_data:
		# print "enter rnrn"
		find_index_rn = input_data.find("\r\n\r\n")
		header = input_data[:find_index_rn+3] ## start to end of header
		therest = input_data[find_index_rn+4:] ## the first few chunk of body
		keep_header = open(input_header, "a+")
		keep_header.write(header)
		keep_header.flush()
		keep_header.close()
		# print "header = ", header
		return header, therest

def getContentLength(header):
	index = header.find("Content-Length: ")
	ContentLength = header[index:]
	indexColon = ContentLength.find(":")
	numContentLength = ContentLength[indexColon+2:]
	findBackrn = numContentLength.find("\r\n")
	pureContentLength = numContentLength[:findBackrn]

	return pureContentLength


def findContentLength(file_header):
	ContentLength = ""
	header = open(file_header, "r")
	for each_line in header:
		if "Content-Length:" in each_line:
			indexColon = each_line.find(":")
			ContentLength = each_line[indexColon+2:]
			break
	header.close()
	return int(ContentLength)

def findETag(file_header):
	# etag = ""
	# header = open(file_header, "r")
	# for each_line in header:
	# 	if "ETag:" in each_line:
	# 		indexColon = each_line.find(":")
	# 		etag = each_line[indexColon+2:]
	# 		break
	# header.close()

	index = file_header.find("ETag:")
	etag_line = file_header[index:]
	indexColon = etag_line.find(":")
	num_etag_line = file_header[indexColon+2:]
	findbackrn = num_etag_line.find("\r\n")
	etag = num_etag_line[:findbackrn]
	return etag

def findDateModified(file_header):
	index = file_header.find("Last-Modified:")
	dm_line = file_header[index:]
	indexColon = dm_line.find(":")
	num_dm_line = file_header[indexColon+2:]
	findbackrn = num_dm_line.find("\r\n")
	dm = num_dm_line[:findbackrn]


	# dm = ""
	# header = open(file_header, "r")
	# for each_line in header:
	# 	if "Last-Modified:" in each_line:
	# 		indexColon = each_line.find(":")
	# 		dm = each_line[indexColon+2:]
	# 		break
	# header.close()
	return dm

def make_request(req_type, what, details, sizeFile, end_point, version="1.1"): ## GET/HEAD , path , host, ver
    """ Compose an HTTP request """
    NL = "\r\n"
    request_line = "{req_type} {what} HTTP/{ver}".format(
        req_type=req_type,
        what=what,
        ver=version
    )
 
    detail_lines = NL.join("{}: {}".format(name, value) for name, value in details.iteritems())

    Range_request = "Range: bytes={r}-{e}".format(r=str(sizeFile), e=str(end_point))
 
    full_request = request_line + NL + detail_lines + NL + Range_request + NL + NL
    return full_request


class HTTPClient(asyncore.dispatcher): ## inherit - extend in python style

	def __init__(self, host, path, port, sizeFile, end_point, namefile): #header_check
		asyncore.dispatcher.__init__(self)	## super -- call structure of super class , self is itself object
		self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
		self.connect((host, port))
		self.host = host
		self.namefile = namefile
		self.length = 0
		self.header_check = 1
		self.recvbuf = StringIO()  ## it's like string builder
		self.logger = logging.getLogger(host+path)

		self.sendbuf = ""
		# # make my request_line
		self.write(
			make_request('GET', path, {"host": host, "Connection": "close"}, sizeFile, end_point) 
			)


		# self.write(mkDownloadRequest(host, path, sizeFile, end_point))

	def write(self, msg):
		self.sendbuf += msg


	def handle_connect(self):
		# print "Connection established"
		# self.logger.debug("connection established")
		pass

	def handle_close(self):
		# self.logger.debug("got disconnected")
		# print "Got disconnected"
		if os.path.exists(input_header):
			os.remove(input_header)
		# print "Download done."
		self.close()

	def handle_read(self): 
		data = self.recv(1024)
		# print len(data)
		body = open(self.namefile, "a+")
		if self.header_check == 1:
			header, therest = getHeader_theRest(data)
			# print header, '--------'
			body.write(therest)
			# print "body.write"
			body.flush()
			# print "body.flush"
			if header!="":
				self.header_check = 0
		else:
			# if len(data) == 0:
			# 	self.close()
			body.write(data)
			body.flush()
			body.close()


		
	def writeable(self): # if there is anything to send??
		return len(self.sendbuf) > 0 ## you have sth to send


	def handle_write(self):
		bytes_send = self.send(self.sendbuf)
		self.sendbuf = self.sendbuf[bytes_send:] ## the remainder



##### 
header_only = getHeaderOnly(servName, port, path)

## condition before entering resume part
if os.path.exists(inputName):
	print "enter if file alr existed"
	#### data from existing header
	ContentLength = getContentLength(header_only) ## type int
	LastModified_from_headerfile = findDateModified(input_header)
	ETag_from_headerfile = findETag(input_header)

	print "ContentLength = ", ContentLength
	print "os.path.getsize(inputName)", os.path.getsize(inputName)

	if int(ContentLength) == os.path.getsize(inputName):
		print "File already exists"
		sys.exit(1)
		
	else:
		# print "file not complete"
		#### data from current header
		########
		header = getHeaderOnly(servName, port, path)
		header_txt = open(input_header2, "a+")
		header_txt.write(header)
		header_txt.flush()
		header_txt.close()
		########
		header = getHeaderOnly(servName, port, path)

		current_content_length = findContentLength(input_header2)
		current_ETag = findETag(input_header2)
		current_dm = findDateModified(input_header2)

		## remove temp header after getting all data
		os.remove(input_header2)
		# print "at IF"
		# print "current_ETag = ", current_ETag
		# print "ETag_from_headerfile", ETag_from_headerfile
		# if current_ETag == ETag_from_headerfile:
		# 	etag_dm_status = True
		# if current_ETag != ETag_from_headerfile:
		# 	if current_dm == LastModified_from_headerfile:
		# 		dm_status == True

		# if etag_dm_status == True or dm_status == True:
		# 	if current_content_length != 0:
		# 		end_point = ContentLength
		# 		sizeFile = os.path.getsize(inputName)
		# 		HTTPClient(servName, object_, port, sizeFile, end_point)

# else:
	# HTTPClient(servName, object_, port, 0, "")

l_content_length = getContentLength(header_only)
l_content_length = int(l_content_length)
# each_row = l_content_length/(2**20)
# remainder_lastrow = (2**20)
# print "each_row = ", each_row
# print "remainder_lastrow = ", remainder_lastrow

name, type_file = inputName.split(".")

clients = []
for i in range(connection_num):

	file_name = name + str(i) + "." + type_file
	sizeFile = ((l_content_length/connection_num)+1)*i
	end_point =  sizeFile + (l_content_length/connection_num)
	client = HTTPClient(servName, object_, port, sizeFile, end_point, file_name)
	clients += [client]

asyncore.loop()


# merge_file = open(inputName, "a+")
content = ""
for j in range(connection_num):
	each_file = name + str(j) + "." + type_file
	with open(each_file, "r") as total:
		data = total.read()
		content += data
	os.remove(each_file)
with open(inputName, "a+") as merge_file:
	merge_file.write(content)
	merge_file.flush()


# http://images.clipartpanda.com/lion-clipart-4Tb5XEETg.png
# clients = [ ## simultineously download
# 	HTTPClient("www.nytimes.com", "/", start,end") ,
# 	HTTPClient("www.nytimes.com", "/") ,
# 	HTTPClient("www.cnn.com", "/") ,
# 	HTTPClient("www.wsj.com", "/")
# ]

# logging.basicConfig(level=logging.DEBUG,
#     format="%(asctime)-15s %(name)s: %(message)s"
#     )
 
# asyncore.loop()
